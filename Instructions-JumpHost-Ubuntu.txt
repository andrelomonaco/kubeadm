# Jumphost Installation Ubuntu 22.04 LTS
# First copy admin.conf from master to JumpHost /tmp directory

sudo touch /etc/cloud/cloud-init.disabled
sudo timedatectl set-timezone America/Sao_Paulo
sudo apt update
sudo apt update && sudo apt -y full-upgrade
sudo reboot

# Firewall

sudo ufw allow 22/tcp
sudo ufw enable
sudo ufw status

# Kubectl Instalation
# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

# Kubeconfig

pwd
mkdir -p $HOME/.kube
cp -i /tmp/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl cluster-info
kubectl get nodes

# Install CNI Cilium

CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

# Creating a Deployment for Testing
# Lastly, create an Nginx deployment with the following command to test the Kubernetes cluster:

kubectl create deploy nginx-web-server --image nginx

# Create a NodePort service with the following command to expose the nginx-web-server deployment on a static port (port 80) on each node in the cluster, 
# which allows external traffic to access the service:

kubectl expose deploy nginx-web-server --port 80 --type NodePort

# Try to access nginx web server from master and from all worker and master nodes.
# Remember by default NodePort are configured in all Kubernetes nodes (Workers, Masters and Infra)

# Install PODMAN

sudo apt-get update
sudo apt-get -y install podman

# Set Podman registries conf
# By default there will be no repository to fetch and install container Images by Podman, hence we need to do that manually 
# so that we can use popular repositories such as Docker.io, Redhat, and Fedora.

# Edit Registry configuration file, scroll to the end of the file
 
sudo vim /etc/containers/registries.conf

# Paste the following lines:

[registries.search]
registries=["registry.access.redhat.com", "registry.fedoraproject.org", "docker.io"]

# Kubernetes tutorial | Tips and Tricks | Linux Bash | Cursor Column, Alias, Auto Completion
# https://www.youtube.com/watch?v=cboYDZd9DlE

# Indentation & Cursor Column for YAML files
# Bash Auto Completion
# Kubectl Alias

sudo apt update
sudo apt install vim

vim .vimrc
set ts=2 et cursorcolumn
source .vimrc
echo "source .vimrc" >> ~/.bashrc

sudo apt update
sudo apt install bash-completion

source <(kubectl completion bash)
echo "source <(kubectl completion bash)" >> ~/.bashrc

alias k=kubectl
complete -o default -F__start_kubectl k

echo "alias k=kubectl" >> ~/.bashrc
echo "complete -o default -F__start_kubectl k" >> ~/.bashrc








