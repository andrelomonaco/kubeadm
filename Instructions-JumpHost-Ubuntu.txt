Instalando o JumpHost

Copiar o admin.conf do master para o /tmp do Jumphost

Depois atualizar e instalar o kubectl 
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

 1  sudo touch /etc/cloud/cloud-init.disabled
    2  sudo timedatectl set-timezone America/Sao_Paulo
    3  sudo apt update
    4  sudo apt-get install apt-utils ufw
    5  sudo apt-get install whiptail
    6  sudo apt update && sudo apt -y full-upgrade
    7  sudo reboot

sudo ufw allow 22/tcp
sudo ufw enable
sudo ufw status


    8  ls -l
    9  pwd
   10  mkdir -p $HOME/.kube
   11  cp - /tmp/admin.conf $HOME/.kube/config
   12  cp -i /tmp/admin.conf $HOME/.kube/config
   13  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   14  sudo apt-get update
   15  sudo apt-get install -y apt-transport-https ca-certificates curl
   16  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   17  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   18  sudo apt-get update
   19  sudo apt-get install -y kubectl
   20  kubectl cluster-info
   21  kubectl get nodes

# Install CNI Cilium

CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

Creating a Deployment for Testing

Lastly, create an Nginx deployment with the following command to test the Kubernetes cluster:

kubectl create deploy nginx-web-server --image nginx

lomonaco@jumphost:~$ kubectl  get pod -o wide
NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES
nginx-web-server-6cc7486658-jrfnf   1/1     Running   0          21s   10.0.3.235   c1worker03   <none>           <none>
nginx-web-server-6cc7486658-kftwm   1/1     Running   0          21s   10.0.1.53    c1worker01   <none>           <none>
nginx-web-server-6cc7486658-xfpvb   1/1     Running   0          21s   10.0.2.195   c1worker02   <none>           <none>

Create a NodePort service with the following command to expose the nginx-web-server deployment on a static port (port 80) on each node in the cluster, 
which allows external traffic to access the service:


